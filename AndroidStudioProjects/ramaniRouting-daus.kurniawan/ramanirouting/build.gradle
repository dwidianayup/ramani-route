apply plugin: 'com.android.library'
apply plugin: 'maven'
uploadArchives {
    repositories.mavenDeployer {
        repository(url: 'http://team.ujuizi.com/archiva/repository/internal') {
            authentication(userName: 'wahyu.raya', password: '1234567890a')
        }
        pom.version = '0.0.2'
        pom.artifactId = 'routing'
        pom.groupId = 'com.ujuizi.ramani'
    }
}


android {
    compileSdkVersion 25
    buildToolsVersion '25.0.3'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "0.0.2"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }


    useLibrary  'org.apache.http.legacy'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })


//    compile 'com.graphhopper:map-matching:0.8.2'
//    compile 'com.graphhopper:graphhopper-core:0.8.2'

    compile 'com.ujuizi.ramani:android:alpha-0.0.1'

    //this is for graphhopper
    compile 'com.carrotsearch:hppc:0.7.2'
//    compile 'org.apache.xmlgraphics:xmlgraphics-commons:2.1'
    compile 'com.squareup.okhttp3:okhttp:3.8.1'
    //this is for mapmatching
    compile 'org.slf4j:slf4j-api:1.7.19'
    compile 'org.slf4j:slf4j-simple:1.7.19'
    compile 'net.sf.trove4j:trove4j:3.0.3'
    compile 'com.graphhopper.external:hmm-lib:1.0.0'
    compile 'com.cocoahero.android:geojson:1.0.1@jar'
    testCompile 'junit:junit:4.12'
}
task deleteJar(type: Delete) {
    delete 'libs/ramanirouting.jar'
}

task createJar(type: Copy) {
    from('build/intermediates/bundles/default/')
    into('libs/')
    include('classes.jar')
    rename('classes.jar', 'ramanirouting.jar')
}

createJar.dependsOn(deleteJar, build)